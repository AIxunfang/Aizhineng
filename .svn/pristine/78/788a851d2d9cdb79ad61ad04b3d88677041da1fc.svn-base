<template>
  <el-row class="wholeDrillRouce">
        <el-col :span="24">
           <div class="navigationbar"> 
              <span class="navigationname">全局参数管理<i class="el-icon-arrow-right" aria-hidden="true"></i>
                 训练资源配置
              </span>
            </div>
         </el-col>
         <el-col :span="24"  style="padding:20px;height:300px">

             <!-- <ve-bar  
             :data="chartData_vebar" 
             :extend="chartExtend" 
             :settings="chartSettings">
             </ve-bar> -->
            <el-col :span="8">
                <ve-pie :data="chartData_vebarcpu"  :settings="chartSettings" ></ve-pie>
            </el-col>
            <el-col :span="8">
                     <ve-pie :data="chartData_vebargpu"  :settings="chartSettings" ></ve-pie> 
            </el-col>
            <el-col :span="8">
                      <ve-pie :data="chartData_vebarmeory"  :settings="chartSettings" ></ve-pie> 
            </el-col>

         </el-col>
         <el-col :span="24">
                 <div style="margin:20px;">
                             <el-table
                                   border
                                  :data="usetableData"
                                  style="width: 100%">
                                  <el-table-column
                                    prop="date"
                                    label="资源类型"
                                    width="180">
                                  </el-table-column>
                                  <el-table-column
                                    prop="CPU"
                                    label="使用中CPU"
                                    width="180">
                                  </el-table-column>
                                  <el-table-column
                                    prop="address"
                                    label="使用中GPU">
                                  </el-table-column>
                                  <el-table-column
                                    prop="address"
                                    label="使用中内存">
                                  </el-table-column>
                                  <el-table-column
                                    label="操作">
                                    <template slot-scope="scope">
                                         <button size="mini" type="primary">修改</button>
                                    </template>


                                  </el-table-column>

                              </el-table>
                       

                         <!-- <el-form  :inline="true"  :model="formmemory" class="demo-form-inline" label-width="120px" ref="formmemory" :rules="rules">
                                <el-form-item label="CPU限额:" prop="cpuamend" >
                                    <el-input v-model="formmemory.cpuamend"  class="cpuinputamend" ></el-input>
                                </el-form-item>
                                 <el-form-item>
                                          <span style=" opacity: 0;" >66666</span>
                                </el-form-item>
                           <el-form-item label="内存限额:" prop="memoryamend" >
                                    <el-input v-model="formmemory.memoryamend"  class="cpuinputamend" ></el-input>
                                </el-form-item>
                                <el-form-item>
                                      <span style=" opacity: 0;" >66666</span>
                                </el-form-item>
                                <el-form-item label="GPU限额:"  prop="gpuamend">
                                    <el-input v-model="formmemory.gpuamend"  class="cpuinputamend" ></el-input>
                                </el-form-item>
                            <el-form-item>
                             </el-form-item> 
                        </el-form
                        <div style="float:right;margin:40px;height:60px; position:relative">
                             <el-button type="primary" size="small" @click="savememoryamend">保存</el-button>
                         </div>  -->
                 </div>
         </el-col>
  </el-row>
</template>
<script>
import { configget, configupdate, findresource } from "@/api/api";
export default {
  data() {
    return {
      usetableData:[],
      chartSettings: {
        radius: 50,
        offsetY: 120,
        itemStyle: {
          color: function(item) {
            var colorlist = ["#6fd2f6", "#449ddb", "#fb6e87", "#ff92a5"];
            return colorlist[item.dataIndex];
          }
        }
      },

      chartExtend: {
        barWidth: "35px",
        color: ["red", "#19d4ae", "red", "#19d4ae", "#5ab1ef"],
        series: {
          barGap: "-100%",
          barCateGoryGap: "50%"
        }
      },
      formmemory: {
        cpuamend: "",
        gpuamend: "",
        memoryamend: ""
      },

      rules: {
        cpuamend: [
          { required: true, message: "不能为空", trigger: "blur" },
          { pattern: /^([1-9]\d*|[0]{1,1})$/, message: "大于-1的正整数" }
        ],
        memoryamend: [
          { required: true, message: "不能为空", trigger: "blur" },
          { pattern: /^[1-9]+\d*$/, message: "大于0的正整数" }
        ],
        gpuamend: [
          { required: true, message: "不能为空", trigger: "blur" },
          { pattern: /^[1-9]+\d*$/, message: "大于0的正整数" }
        ]
      },

      chartData_vebarcpu: {
        columns: ["类型", "使用情况"],
        rows: []
      },
      chartData_vebargpu: {
        columns: ["类型", "使用情况"],
        rows: []
      },
      chartData_vebarmeory: {
        columns: ["类型", "使用情况"],
        rows: []
      },
      formInlinecpu: {
        cpuamend: ""
      }
    };
  },
  methods: {
    getconfigget() {
      configget().then(res => {
        console.log("------资源数据----");
        console.log(res);
        if (res.data.code == 0) {
          this.formmemory.cpuamend = res.data.data.cpu;
          this.formmemory.gpuamend = res.data.data.gpu;
          this.formmemory.memoryamend = res.data.data.memory;
        }
      });
    },
    savememoryamend() {
      var params = {
        type: 1,
        memory: this.formmemory.memoryamend,
        gpu: this.formmemory.gpuamend,
        cpu: this.formmemory.cpuamend
      };
      this.$refs["formmemory"].validate(valid => {
        if (valid) {
          configupdate(params).then(res => {
            if (res.data.code == 0) {
              this.$message({
                message: "修改成功",
                type: "success"
              });
              this.$refs["formmemory"].resetFields();
              setTimeout(() => {
                this.getconfigget();
              }, 1000);
            }
          });
        } else {
          console.log("error submit!!");
          return false;
        }
      });
    },
    getfindresource() {
      findresource().then(res => {
        console.log("---ziyuan---");
        console.log(res);
        if (res.data.code == 0) {
          this.chartData_vebarcpu.rows = [
            {
              类型: "训练剩余",
              使用情况:
                res.data.data.all_training_limit_cpu -
                res.data.data.all_training_used_cpu
            },
            { 类型: "训练使用", 使用情况: res.data.data.all_training_used_cpu },
            { 类型: "发布使用", 使用情况: res.data.data.all_publish_used_cpu },
            {
              类型: "发布剩余",
              使用情况:
                res.data.data.all_publish_limit_cpu -
                res.data.data.all_publish_used_cpu
            },
          ]
            this.chartData_vebargpu.rows = [
              {
                类型: "训练剩余",
                使用情况:
                  res.data.data.all_training_limit_gpu -
                  res.data.data.all_training_used_gpu
              },
              {
                类型: "训练使用",
                使用情况: res.data.data.all_training_used_gpu
              },
              {
                类型: "发布使用",
                使用情况: res.data.data.all_publish_used_gpu
              },
              {
                类型: "发布剩余",
                使用情况:
                  res.data.data.all_publish_limit_gpu -
                  res.data.data.all_publish_used_gpu
              }
            ]
           this.chartData_vebarmeory.rows=[
                 {
                   类型: "训练剩余",
                   使用情况: res.data.data.all_training_used_memory,
                 },
                 {
                    类型: "训练使用",
                    使用情况: res.data.data.all_training_limit_memory - res.data.data.all_training_used_memory,
                 },
                 {
                   类型:"发布使用",
                   使用情况:  res.data.data.all_publish_used_memory
                 },
                 {
                   类型:'发布剩余',
                   使用情况:res.data.data.all_publish_limit_memory - res.data.data.all_publish_used_memory,
                 }

           ]
            // {
            //   '类型': "GPU",
            //   '训练使用': res.data.data.all_training_used_gpu,
            //   '训练剩余':
            //     res.data.data.all_training_limit_gpu -
            //     res.data.data.all_training_used_gpu,
            //   '发布使用': res.data.data.all_publish_used_gpu,
            //   '发布剩余':
            //     res.data.data.all_publish_limit_gpu -
            //     res.data.data.all_publish_used_gpu,
            // },
            // {
            //   '类型': "内存",
            //   '训练使用': res.data.data.all_training_used_memory,
            //   '训练剩余':
            //     res.data.data.all_publish_limit_memory -
            //     res.data.data.all_training_used_memory,
            //   '发布使用': res.data.data.all_publish_used_memory,
            //   '发布剩余':
            //     res.data.data.all_publish_limit_memory -
            //     res.data.data.all_publish_used_memory,
            // }
        
        }
      });
    }
  },
  mounted() {
    this.getconfigget();
    this.getfindresource();
  }
};
</script>
<style lang="scss" scoped>
.wholeDrillRouce {
  min-width: 1116px;
  .memorycpugpu {
    text-align: center;
    margin-top: 40px;
  }
}
</style>

